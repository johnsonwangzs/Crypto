from pycallgraph import PyCallGraph
from pycallgraph.output import GraphvizOutput


# fin = open("testTxt_10e4.txt", "r")
# fout = open("output.txt", "w")
# N = 10000
# x = []
# for i in fin.readlines():
#     print(eval(i))
#     x.append(hex(eval(i)))
# print(x)

import time

initial_place_table = \
   [[57, 49, 41, 33, 25, 17, 9, 1,
     59, 51, 43, 35, 27, 19, 11, 3,
     61, 53, 45, 37, 29, 21, 13, 5,
     63, 55, 47, 39, 31, 23, 15, 7,
     56, 48, 40, 32, 24, 16, 8, 0,
     58, 50, 42, 34, 26, 18, 10, 2,
     60, 52, 44, 36, 28, 20, 12, 4,
     62, 54, 46, 38, 30, 22, 14, 6],
    [39, 7, 47, 15, 55, 23, 63, 31,
     38, 6, 46, 14, 54, 22, 62, 30,
     37, 5, 45, 13, 53, 21, 61, 29,
     36, 4, 44, 12, 52, 20, 60, 28,
     35, 3, 43, 11, 51, 19, 59, 27,
     34, 2, 42, 10, 50, 18, 58, 26,
     33, 1, 41, 9, 49, 17, 57, 25,
     32, 0, 40, 8, 48, 16, 56, 24]]


ex_table = \
    [31, 0, 1, 2, 3, 4,
     3, 4, 5, 6, 7, 8,
     7, 8, 9, 10, 11, 12,
     11, 12, 13, 14, 15, 16,
     15, 16, 17, 18, 19, 20,
     19, 20, 21, 22, 23, 24,
     23, 24, 25, 26, 27, 28,
     27, 28, 29, 30, 31, 0]


SP = [[8421888, 0, 32768, 8421890, 8421378, 33282, 2, 32768, 512, 8421888, 8421890, 512, 8389122, 8421378, 8388608, 2,
       514, 8389120, 8389120, 33280, 33280, 8421376, 8421376, 8389122, 32770, 8388610, 8388610, 32770, 0, 514, 33282,
       8388608, 32768, 8421890, 2, 8421376, 8421888, 8388608, 8388608, 512, 8421378, 32768, 33280, 8388610, 512, 2,
       8389122, 33282, 8421890, 32770, 8421376, 8389122, 8388610, 514, 33282, 8421888, 514, 8389120, 8389120, 0, 32770,
       33280, 0, 8421378],
      [1074282512, 1073758208, 16384, 540688, 524288, 16, 1074266128, 1073758224, 1073741840, 1074282512, 1074282496,
       1073741824, 1073758208, 524288, 16, 1074266128, 540672, 524304, 1073758224, 0, 1073741824, 16384, 540688,
       1074266112, 524304, 1073741840, 0, 540672, 16400, 1074282496, 1074266112, 16400, 0, 540688, 1074266128, 524288,
       1073758224, 1074266112, 1074282496, 16384, 1074266112, 1073758208, 16, 1074282512, 540688, 16, 16384, 1073741824,
       16400, 1074282496, 524288, 1073741840, 524304, 1073758224, 1073741840, 524304, 540672, 0, 1073758208, 16400,
       1073741824, 1074266128, 1074282512, 540672],
      [260, 67174656, 0, 67174404, 67109120, 0, 65796, 67109120, 65540, 67108868, 67108868, 65536, 67174660, 65540,
       67174400, 260, 67108864, 4, 67174656, 256, 65792, 67174400, 67174404, 65796, 67109124, 65792, 65536, 67109124, 4,
       67174660, 256, 67108864, 67174656, 67108864, 65540, 260, 65536, 67174656, 67109120, 0, 256, 65540, 67174660,
       67109120, 67108868, 256, 0, 67174404, 67109124, 65536, 67108864, 67174660, 4, 65796, 65792, 67108868, 67174400,
       67109124, 260, 67174400, 65796, 4, 67174404, 65792],
      [2151682048, 2147487808, 2147487808, 64, 4198464, 2151678016, 2151677952, 2147487744, 0, 4198400, 4198400,
       2151682112, 2147483712, 0, 4194368, 2151677952, 2147483648, 4096, 4194304, 2151682048, 64, 4194304, 2147487744,
       4160, 2151678016, 2147483648, 4160, 4194368, 4096, 4198464, 2151682112, 2147483712, 4194368, 2151677952, 4198400,
       2151682112, 2147483712, 0, 0, 4198400, 4160, 4194368, 2151678016, 2147483648, 2151682048, 2147487808, 2147487808,
       64, 2151682112, 2147483712, 2147483648, 4096, 2151677952, 2147487744, 4198464, 2151678016, 2147487744, 4160,
       4194304, 2151682048, 64, 4194304, 4096, 4198464],
      [128, 17039488, 17039360, 553648256, 262144, 128, 536870912, 17039360, 537133184, 262144, 16777344, 537133184,
       553648256, 553910272, 262272, 536870912, 16777216, 537133056, 537133056, 0, 536871040, 553910400, 553910400,
       16777344, 553910272, 536871040, 0, 553648128, 17039488, 16777216, 553648128, 262272, 262144, 553648256, 128,
       16777216, 536870912, 17039360, 553648256, 537133184, 16777344, 536870912, 553910272, 17039488, 537133184, 128,
       16777216, 553910272, 553910400, 262272, 553648128, 553910400, 17039360, 0, 537133056, 553648128, 262272,
       16777344, 536871040, 262144, 0, 537133056, 17039488, 536871040],
      [268435464, 270532608, 8192, 270540808, 270532608, 8, 270540808, 2097152, 268443648, 2105352, 2097152, 268435464,
       2097160, 268443648, 268435456, 8200, 0, 2097160, 268443656, 8192, 2105344, 268443656, 8, 270532616, 270532616, 0,
       2105352, 270540800, 8200, 2105344, 270540800, 268435456, 268443648, 8, 270532616, 2105344, 270540808, 2097152,
       8200, 268435464, 2097152, 268443648, 268435456, 8200, 268435464, 270540808, 2105344, 270532608, 2105352,
       270540800, 0, 270532616, 8, 8192, 270532608, 2105352, 8192, 2097160, 268443656, 0, 270540800, 268435456, 2097160,
       268443656],
      [1048576, 34603009, 33555457, 0, 1024, 33555457, 1049601, 34604032, 34604033, 1048576, 0, 33554433, 1, 33554432,
       34603009, 1025, 33555456, 1049601, 1048577, 33555456, 33554433, 34603008, 34604032, 1048577, 34603008, 1024,
       1025, 34604033, 1049600, 1, 33554432, 1049600, 33554432, 1049600, 1048576, 33555457, 33555457, 34603009,
       34603009, 1, 1048577, 33554432, 33555456, 1048576, 34604032, 1025, 1049601, 34604032, 1025, 33554433, 34604033,
       34603008, 1049600, 0, 1, 34604033, 0, 1049601, 34603008, 1024, 33554433, 33555456, 1024, 1048577],
      [134219808, 2048, 131072, 134350880, 134217728, 134219808, 32, 134217728, 131104, 134348800, 134350880, 133120,
       134350848, 133152, 2048, 32, 134348800, 134217760, 134219776, 2080, 133120, 131104, 134348832, 134350848, 2080,
       0, 0, 134348832, 134217760, 134219776, 133152, 131072, 133152, 131072, 134350848, 2048, 32, 134348832, 2048,
       133152, 134219776, 32, 134217760, 134348800, 134348832, 134217728, 131072, 134219808, 0, 134350880, 131104,
       134217760, 134348800, 134219776, 134219808, 0, 134350880, 133120, 133120, 2080, 2080, 131104, 134217728,
       134350848]]

circulation_table = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

pc_table = \
   [[56, 48, 40, 32, 24, 16, 8, 0,
     57, 49, 41, 33, 25, 17, 9, 1,
     58, 50, 42, 34, 26, 18, 10, 2,
     59, 51, 43, 35, 62, 54, 46, 38,
     30, 22, 14, 6, 61, 53, 45, 37,
     29, 21, 13, 5, 60, 52, 44, 36,
     28, 20, 12, 4, 27, 19, 11, 3],
    [13, 16, 10, 23, 0, 4, 2, 27,
     14, 5, 20, 9, 22, 18, 11, 3,
     25, 7, 15, 6, 26, 19, 12, 1,
     40, 51, 30, 36, 46, 54, 29, 39,
     50, 44, 32, 47, 43, 48, 38, 55,
     33, 52, 45, 41, 49, 35, 28, 31]]


pcl = [63, 55]
pco = [56, 48]


K = [0 for i in range(16)]


def initial_place(m, op):  # IP
    c = 0b10
    for i in range(64):
        c |= 1 & (m >> (63 - initial_place_table[op][i]))
        c <<= 1
    c >>= 1
    c &= 0x0ffffffffffffffff
    return c


def extend(m):
    c = 0b10
    for i in range(48):
        c |= 1 & (m >> (31 - ex_table[i]))
        c <<= 1
    c >>= 1
    c &= 0x0ffffffffffff
    return c


def sp_box(m):
    c = 0
    for i in range(8):
        c ^= SP[i][0b111111 & (m >> ((7 - i) * 6))]
    return c


def pc(m, op):
    c = 0b10
    for i in range(pco[op]):
        c |= 1 & (m >> (pcl[op] - pc_table[op][i]))
        c <<= 1
    c >>= 1
    c &= 0x0ffffffffffffffff
    return c


def left_shift(m, r):  # r round (0, 1, 2, ...., 15)
    if circulation_table[r] == 1:
        return ((m << 1) | ((m >> 27) & 1)) & 0xfffffff
    else:
        return ((m << 2) | ((m >> 26) & 3)) & 0xfffffff


def key_generate(k0):
    k = pc(k0, 0)
    for r in range(16):
        k = (left_shift(k >> 28, r) << 28) | left_shift(0xfffffff & k, r)
        K[r] = pc(k, 1)


def f(right, key):
    return sp_box(extend(right) ^ key)


def des_encrypt(m):
    m = initial_place(m, 0)  # op = 0
    left = (m >> 32)
    right = (m & 0xffffffff)
    for i in range(16):
        temp = left
        left = right
        right = temp ^ f(right, K[i])
    m = (right << 32) | left  # r + l
    m = initial_place(m, 1)
    return m


def des_decrypt(m):
    m = initial_place(m, 0)  # op = 0
    left = (m >> 32)
    right = (m & 0xffffffff)
    for i in range(16):
        temp = left
        left = right
        right = temp ^ f(right, K[15 - i])
    m = (right << 32) | left  # r + l
    m = initial_place(m, 1)
    return m


if __name__ == '__main__':
    graphviz = GraphvizOutput()
    graphviz.output_file = 'test.png'
    with PyCallGraph(output=graphviz):
        key_generate(0x0f1571c947d9e859)
        beg = time.perf_counter()
        for i in range(1000):
            des_encrypt(0x02468aceeca86420)
        end = time.perf_counter()
        print(end - beg)
        # 0xda02ce3a89ecac3b
        # 0x02468aceeca86420, 0x0f1571c947d9e859

