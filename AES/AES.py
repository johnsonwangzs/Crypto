# -*- coding: utf-8 -*-
# @Time     : 2022/6/7 20:37
# @Author   : WZS
# @File     : AES.py
# @Software : PyCharm
# @Function : AES算法


import copy


Sbox = [[0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
        [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
        [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
        [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
        [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
        [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
        [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
        [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
        [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
        [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
        [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
        [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
        [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
        [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
        [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
        [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]]

ISbox = [[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb],
         [0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb],
         [0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e],
         [0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25],
         [0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92],
         [0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84],
         [0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06],
         [0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b],
         [0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73],
         [0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e],
         [0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b],
         [0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4],
         [0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f],
         [0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef],
         [0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61],
         [0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]]

Rcon = [0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000,
        0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000]

"""
列混淆矩阵：
02 03 01 01
01 02 03 01
01 01 02 03
03 01 01 02
逆向列混淆矩阵：
0e 0b 0d 09
09 0e 0b 0d
0d 09 0e 0b
0b 0d 09 0e
"""

W = []  # 存密钥
S = []  # 存数据


def T(wi, round):  # T函数
    # 字循环
    tmp = wi[0]
    wi[0] = wi[1]
    wi[1] = wi[2]
    wi[2] = wi[3]
    wi[3] = tmp
    # 字代换
    for i in range(4):
        # 计算出sbox字代换的行号和列号
        x = wi[i] >> 4
        y = wi[i] & 0xf
        wi[i] = Sbox[x][y]
    # 轮常量异或
    res = []
    for i in range(4):
        res.append(wi[i] ^ ((Rcon[round] >> (8 * (3 - i))) & 0xff))
    return res


def genKey(origKey):  # 密钥扩展
    global W
    W = []
    # 初始4列：W0~W3
    tmp = []
    for i in range(16):
        x = (origKey >> (8 * (15 - i))) & 0xff  # 依次提取出16个字节
        tmp.append(x)
        if (i + 1) % 4 == 0:
            W.append(tmp)
            tmp = []
    # 递推产生新的列W4~W43
    for i in range(10):
        for j in range(4):
            n = (i + 1) * 4 + j
            W.append([])
            if n % 4 == 0:
                afterT = T(copy.deepcopy(W[n - 1]), i)
                for k in range(4):
                    W[n].append(W[n - 4][k] ^ afterT[k])
            else:
                for k in range(4):
                    W[n].append(W[n - 4][k] ^ W[n - 1][k])


def byteSub():  # 字节代替
    for i in range(4):
        for j in range(4):
            # 计算出sbox字节代替的行号和列号
            x = S[i][j] >> 4
            y = S[i][j] & 0xf
            S[i][j] = Sbox[x][y]


def invByteSub():  # 逆向字节代替
    for i in range(4):
        for j in range(4):
            # 计算出sbox字节代替的行号和列号
            x = S[i][j] >> 4
            y = S[i][j] & 0xf
            S[i][j] = ISbox[x][y]


def addKey(round):  # 轮密钥加
    for i in range(4):
        for j in range(4):
            S[i][j] = S[i][j] ^ W[4 * round + i][j]


def shiftRow():  # 行移位
    # 第0行不移位
    # 第1行左移1字节
    tmp1 = S[0][1]
    S[0][1] = S[1][1]
    S[1][1] = S[2][1]
    S[2][1] = S[3][1]
    S[3][1] = tmp1
    # 第2行左移2字节
    tmp2 = S[0][2]
    tmp3 = S[1][2]
    S[0][2] = S[2][2]
    S[1][2] = S[3][2]
    S[2][2] = tmp2
    S[3][2] = tmp3
    # 第3行左移3字节（即右移1字节）
    tmp4 = S[3][3]
    S[3][3] = S[2][3]
    S[2][3] = S[1][3]
    S[1][3] = S[0][3]
    S[0][3] = tmp4


def invShiftRow():  # 逆向行移位
    # 第0行不移位
    # 第1行右移1字节
    tmp1 = S[3][1]
    S[3][1] = S[2][1]
    S[2][1] = S[1][1]
    S[1][1] = S[0][1]
    S[0][1] = tmp1
    # 第2行右移2字节
    tmp2 = S[2][2]
    tmp3 = S[3][2]
    S[2][2] = S[0][2]
    S[3][2] = S[1][2]
    S[0][2] = tmp2
    S[1][2] = tmp3
    # 第3行右移3字节（即左移1字节）
    tmp4 = S[0][3]
    S[0][3] = S[1][3]
    S[1][3] = S[2][3]
    S[2][3] = S[3][3]
    S[3][3] = tmp4


def GF_multiply(a, b):  # GF(2^8)中的乘法
    m = 0x11b
    ans = 0
    while b > 0:
        if (b & 0x01) == 0x01:  # 如果b的二进制最低位为1
            ans ^= a  # 进行一次多项式乘法
        a <<= 1
        if (a & 0x100) == 0x100:  # 如果a的二进制最高位为1
            a ^= m
        a &= 0xff
        b >>= 1
    return ans


def mixColumn():  # 列混淆
    for i in range(4):
        tmp0 = GF_multiply(2, S[i][0]) ^ GF_multiply(3, S[i][1]) ^ S[i][2] ^ S[i][3]
        tmp1 = S[i][0] ^ GF_multiply(2, S[i][1]) ^ GF_multiply(3, S[i][2]) ^ S[i][3]
        tmp2 = S[i][0] ^ S[i][1] ^ GF_multiply(2, S[i][2]) ^ GF_multiply(3, S[i][3])
        tmp3 = GF_multiply(3, S[i][0]) ^ S[i][1] ^ S[i][2] ^ GF_multiply(2, S[i][3])
        S[i][0], S[i][1], S[i][2], S[i][3] = tmp0, tmp1, tmp2, tmp3


def invMixColumn():  # 逆向列混淆
    for i in range(4):
        tmp0 = GF_multiply(0x0e, S[i][0]) ^ GF_multiply(0x0b, S[i][1]) \
               ^ GF_multiply(0x0d, S[i][2]) ^ GF_multiply(0x09, S[i][3])
        tmp1 = GF_multiply(0x09, S[i][0]) ^ GF_multiply(0x0e, S[i][1]) \
               ^ GF_multiply(0x0b, S[i][2]) ^ GF_multiply(0x0d, S[i][3])
        tmp2 = GF_multiply(0x0d, S[i][0]) ^ GF_multiply(0x09, S[i][1]) \
               ^ GF_multiply(0x0e, S[i][2]) ^ GF_multiply(0x0b, S[i][3])
        tmp3 = GF_multiply(0x0b, S[i][0]) ^ GF_multiply(0x0d, S[i][1]) \
               ^ GF_multiply(0x09, S[i][2]) ^ GF_multiply(0x0e, S[i][3])
        S[i][0], S[i][1], S[i][2], S[i][3] = tmp0, tmp1, tmp2, tmp3


def encrypt(pTxt, key):
    global W, S
    S, W = [], []
    genKey(key)
    # 输入状态矩阵（16字节）
    tmp = []
    for i in range(16):
        x = (pTxt >> (8 * (15 - i))) & 0xff
        tmp.append(x)
        if (i + 1) % 4 == 0:
            S.append(tmp)
            tmp = []
    # 初始变换：轮密钥加
    addKey(0)
    # 第1~9轮
    for i in range(1, 10):
        byteSub()  # 字节代替
        shiftRow()  # 行移位
        mixColumn()  # 列混淆
        addKey(i)  # 轮密钥加
    # 第10轮
    byteSub()
    shiftRow()
    addKey(10)


def decrypt(cTxt, key):
    global W, S
    S, W = [], []
    genKey(key)
    # 输入状态矩阵（16字节）
    tmp = []
    for i in range(16):
        x = (cTxt >> (8 * (15 - i))) & 0xff
        tmp.append(x)
        if (i + 1) % 4 == 0:
            S.append(tmp)
            tmp = []
    # 初始变换：轮密钥加
    addKey(10)
    # 第1~9轮
    for i in range(9, 0, -1):
        invShiftRow()  # 逆向行移位
        invByteSub()  # 逆向字节代替
        addKey(i)  # 轮密钥加
        invMixColumn()  # 逆向列混淆
    # 第10轮
    invShiftRow()  # 逆向行移位
    invByteSub()  # 逆向字节代替
    addKey(0)  # 轮密钥加


def printInHex(x):
    s = 0
    for i in range(4):
        for j in range(4):
            s = (s << 8) + x[i][j]
    print(hex(s))


if __name__ == '__main__':
    print("--------AES--------")
    mode = eval(input("请输入模式（0=加密，1=解密）："))
    key = eval(input("请输入128bit密钥（16进制）："))
    if mode == 0:
        plainTxt = eval(input("请输入128bit明文（16进制）："))
        encrypt(plainTxt, key)
        printInHex(S)
    elif mode == 1:
        cipherTxt = eval(input("请输入128bit密文（16进制）："))
        decrypt(cipherTxt, key)
        printInHex(S)

    # 样例
    # key = 0x0f1571c947d9e8590cb7add6af7f6798
    # plainTxt = 0x0123456789abcdeffedcba9876543210
    # # cipherTxt = 0xff0b844a0853bf7c6934ab4364148fb9
    # encrypt(plainTxt, key)
    # printInHex(S)
    #
    # key = 0x0f1571c947d9e8590cb7add6af7f6798
    # # plainTxt = 0x0123456789abcdeffedcba9876543210
    # cipherTxt = 0xff0b844a0853bf7c6934ab4364148fb9
    # decrypt(cipherTxt, key)
    # printInHex(S)

    # 测试数据1
    # key = 0x3475bd76fa040b73f521ffcd9de93f24
    # plainTxt = 0x1b5e8b0f1bc78d238064826704830cdb
    # # cipherTxt = 0xf3855216ddf401d4d42c8002e686c6e7
    # encrypt(plainTxt, key)
    # printInHex(S)
    #
    # key = 0x3475bd76fa040b73f521ffcd9de93f24
    # # plainTxt = 0x1b5e8b0f1bc78d238064826704830cdb
    # cipherTxt = 0xf3855216ddf401d4d42c8002e686c6e7
    # decrypt(cipherTxt, key)
    # printInHex(S)
    #
    # # 测试数据2
    # key = 0x2b24424b9fed596659842a4d0b007c61
    # plainTxt = 0x41b267bc5905f0a3cd691b3ddaee149d
    # # cipherTxt = 0xfba4ec67020f1573ed28b47d7286d298
    # encrypt(plainTxt, key)
    # printInHex(S)
    #
    # key = 0x2b24424b9fed596659842a4d0b007c61
    # # plainTxt = 0x41b267bc5905f0a3cd691b3ddaee149d
    # cipherTxt = 0xfba4ec67020f1573ed28b47d7286d298
    # decrypt(cipherTxt, key)
    # printInHex(S)
