from pycallgraph import PyCallGraph
from pycallgraph.output import GraphvizOutput


def fast_pow_mod(x, n, m):
    d = 1
    while n > 0:
        if n % 2 == 1:
            d = (d * x) % m  # 将n的二进制表示中等于1的位对应的x的幂相乘
            n = (n - 1) // 2
        else:
            n = n // 2
        x = (x * x) % m  # 计算x的2^i次幂
    return d


def main():
    x = eval(input("please input the value of x(Base):"))
    n = eval(input("please input the value of n(Expo):"))
    m = eval(input("please input the value of m(Modulus):"))

    # x, n, m = 7, 16, 3
    # x, n, m = 5, 1003, 31
    # x, n, m = 1494462659429290047815067355171411187560751791530, 65537, 2268838711304724304304396119509416774597723292474
    # x, n, m = 22490812876539885046336053040043361022772062226905764414319531416752624982967181455912526153033030222985778230314070837549143068021815197910334221004333099, 65537, 26381036806254391211255825330031625908895486635496820170811397576118892705526151526139312916798859030242219181178517837920904022720459931859633170905729517
    # x, n, m = 237218075278892229535140238768762235405145645557640724744207466370544846457682663369976322798944392433104280595584635896821245048737637289361896703300454795175488861724813324867455119120284612785871304351940501930714775024417724051440337510897547661217466354700893011496892348407228806138461120064957907686566, 65537, 349972806688784936669965759420500287481274799328355633592840001661382340587247200055746522814275902430370330954725697648747610084477917676220179203273361291098368287612837135979510900982047154261023406927515096043384562410643544643505195484211397819374480917731785250826080723518532061522456937734714740424476

    graphviz = GraphvizOutput()
    graphviz.output_file = 'fastpow_mod.png'
    with PyCallGraph(output=graphviz):
        print("calculating...{0}^{1} mod {2}...".format(x, n, m))
        print("ans =", fast_pow_mod(x, n, m))


if __name__ == '__main__':
    main()
